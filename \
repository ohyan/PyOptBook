update chapter2
# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
#
# On branch main
# Your branch is ahead of 'origin/main' by 1 commit.
#   (use "git push" to publish your local commits)
#
# Changes to be committed:
#	new file:   2.tutorial/20220109_tutorial.ipynb
#	modified:   2.tutorial/tutorial.ipynb
#
# ------------------------ >8 ------------------------
# Do not modify or remove the line above.
# Everything below it will be ignored.
diff --git a/2.tutorial/20220109_tutorial.ipynb b/2.tutorial/20220109_tutorial.ipynb
new file mode 100644
index 0000000..ee1c481
--- /dev/null
+++ b/2.tutorial/20220109_tutorial.ipynb
@@ -0,0 +1,1088 @@
+{
+ "cells": [
+  {
+   "cell_type": "code",
+   "execution_count": 1,
+   "id": "b14efee0-2c7e-4627-b696-2b18081d5c64",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "import pulp"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "19542e8f-110e-46f8-84af-2d8f23c48187",
+   "metadata": {},
+   "source": [
+    "## 問題1\n",
+    "１個120円のりんごと１個１５０円のなしを合わせて10個買ったら、代金の合計が1440円でした。りんごとなしを、それぞれ何個買ったでしょう。\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 2,
+   "id": "b04e8e10-116f-4620-b2fc-2091b6edc1cc",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# ref: https://www.coin-or.org/PuLP/pulp.html\n",
+    "problem = pulp.LpProblem(\n",
+    "    'SLE',\n",
+    "    pulp.LpMaximize,\n",
+    ")"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 3,
+   "id": "4c6cd9dc-ea84-489a-818b-fe926db90980",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "x = pulp.LpVariable('x', cat='Continuous')\n",
+    "y = pulp.LpVariable('y', cat='Continuous')"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 4,
+   "id": "e336da37-cc43-4764-9462-9310e59bebaa",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "problem += 120 * x + 150 * y == 1440\n",
+    "problem += x + y == 10"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 5,
+   "id": "46c73334-771a-40ba-95c6-3a9849644f1c",
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Welcome to the CBC MILP Solver \n",
+      "Version: 2.10.3 \n",
+      "Build Date: Dec 15 2019 \n",
+      "\n",
+      "command line - /Users/jianghui.ouyang/repository/PyOptBook/venv/lib/python3.8/site-packages/pulp/apis/../solverdir/cbc/osx/64/cbc /var/folders/_x/r6xc9__d50sgdr9y8zj5bc5nbq0vnj/T/f57968da213a4ef6bd05c99649844b32-pulp.mps max timeMode elapsed branch printingOptions all solution /var/folders/_x/r6xc9__d50sgdr9y8zj5bc5nbq0vnj/T/f57968da213a4ef6bd05c99649844b32-pulp.sol (default strategy 1)\n",
+      "At line 2 NAME          MODEL\n",
+      "At line 3 ROWS\n",
+      "At line 7 COLUMNS\n",
+      "At line 13 RHS\n",
+      "At line 16 BOUNDS\n",
+      "At line 20 ENDATA\n",
+      "Problem MODEL has 2 rows, 3 columns and 4 elements\n",
+      "Coin0008I MODEL read with 0 errors\n",
+      "Option for timeMode changed from cpu to elapsed\n",
+      "Presolve 0 (-2) rows, 0 (-3) columns and 0 (-4) elements\n",
+      "Empty problem - 0 rows, 0 columns and 0 elements\n",
+      "Optimal - objective value -0\n",
+      "After Postsolve, objective 0, infeasibilities - dual 0 (0), primal 0 (0)\n",
+      "Optimal objective 0 - 0 iterations time 0.002, Presolve 0.00\n",
+      "Option for printingOptions changed from normal to all\n",
+      "Total time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n",
+      "\n"
+     ]
+    }
+   ],
+   "source": [
+    "status = problem.solve()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 6,
+   "id": "2cfcb4b2-dc06-4858-aebd-49daae186f30",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "'Optimal'"
+      ]
+     },
+     "execution_count": 6,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "pulp.LpStatus[status]"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 7,
+   "id": "5f8b6e4b-a64a-40a7-830d-345f8f9d698d",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "{0: 'Not Solved',\n",
+       " 1: 'Optimal',\n",
+       " -1: 'Infeasible',\n",
+       " -2: 'Unbounded',\n",
+       " -3: 'Undefined'}"
+      ]
+     },
+     "execution_count": 7,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "pulp.LpStatus"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 8,
+   "id": "019e8f9f-4993-4b21-9549-b5961c047d18",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "2.0"
+      ]
+     },
+     "execution_count": 8,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "x.value()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 9,
+   "id": "e22e8f91-5021-46d4-b520-169a2c549ebe",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "8.0"
+      ]
+     },
+     "execution_count": 9,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "y.value()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "568c6a90-73f7-4a17-aa22-359a0aa3e72f",
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  },
+  {
+   "cell_type": "markdown",
+   "id": "c399dfc5-4e61-4b67-9cba-44e0acb09ddd",
+   "metadata": {},
+   "source": [
+    "## 問題2\n",
+    "ある工場で商品pとqを製造する。\n",
+    "- 商品pを1kg製造するには原料ｍが1kg, 原料nが2kgいる\n",
+    "- 商品qを1kg製造するには原料mが3kg, 原料nが1kgいる\n",
+    "- 原料ｍの在庫は30kg, 原料nの在庫は40kg\n",
+    "- 単位量あたりの利得は、製品pは1万円、製品qは2万円\n",
+    "\n",
+    "利得を最大化するために、製品pとqそれぞれなんkg"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 10,
+   "id": "5ec67abc-8e2c-44ee-b229-5b128d483425",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "problem = pulp.LpProblem(\n",
+    "    'FactoryProducts',\n",
+    "    pulp.LpMaximize,\n",
+    ")"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 11,
+   "id": "2ae94bf1-0038-4ac6-9574-c6d1ed72251a",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "x = pulp.LpVariable('x', cat='Continuos')\n",
+    "y = pulp.LpVariable('y', cat='Continuos')"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 12,
+   "id": "4de67c90-b5f1-471f-b6db-d77f75c8f6e5",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "problem += 1 * x + 3 * y <= 30\n",
+    "problem += 2 * x + 1 * y <= 40\n",
+    "problem += x >= 0\n",
+    "problem += y >= 0\n",
+    "problem += x + 2 * y"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 13,
+   "id": "fd2583d6-09ae-45dc-9017-9fc2c05011b7",
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Welcome to the CBC MILP Solver \n",
+      "Version: 2.10.3 \n",
+      "Build Date: Dec 15 2019 \n",
+      "\n",
+      "command line - /Users/jianghui.ouyang/repository/PyOptBook/venv/lib/python3.8/site-packages/pulp/apis/../solverdir/cbc/osx/64/cbc /var/folders/_x/r6xc9__d50sgdr9y8zj5bc5nbq0vnj/T/564ba215c7dc490ba741af5f0740b310-pulp.mps max timeMode elapsed branch printingOptions all solution /var/folders/_x/r6xc9__d50sgdr9y8zj5bc5nbq0vnj/T/564ba215c7dc490ba741af5f0740b310-pulp.sol (default strategy 1)\n",
+      "At line 2 NAME          MODEL\n",
+      "At line 3 ROWS\n",
+      "At line 9 COLUMNS\n",
+      "At line 18 RHS\n",
+      "At line 23 BOUNDS\n",
+      "At line 26 ENDATA\n",
+      "Problem MODEL has 4 rows, 2 columns and 6 elements\n",
+      "Coin0008I MODEL read with 0 errors\n",
+      "Option for timeMode changed from cpu to elapsed\n",
+      "Presolve 2 (-2) rows, 2 (0) columns and 4 (-2) elements\n",
+      "0  Obj -0 Dual inf 2.999998 (2)\n",
+      "2  Obj 26\n",
+      "Optimal - objective value 26\n",
+      "After Postsolve, objective 26, infeasibilities - dual 0 (0), primal 0 (0)\n",
+      "Optimal objective 26 - 2 iterations time 0.002, Presolve 0.00\n",
+      "Option for printingOptions changed from normal to all\n",
+      "Total time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n",
+      "\n"
+     ]
+    }
+   ],
+   "source": [
+    "status = problem.solve()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 14,
+   "id": "8c7b8ffb-203f-46dc-a847-2cacabf04cfe",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "'Optimal'"
+      ]
+     },
+     "execution_count": 14,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "pulp.LpStatus[status]"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 15,
+   "id": "05e59463-e32d-443b-93de-71f7799b7708",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "18.0"
+      ]
+     },
+     "execution_count": 15,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "x.value()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 16,
+   "id": "3b92d8ec-3aa9-4f21-9b17-60080041ce5b",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "4.0"
+      ]
+     },
+     "execution_count": 16,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "y.value()"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "278613f2-d9f1-45ef-9551-c1cf306bdb66",
+   "metadata": {},
+   "source": [
+    "## 問題3"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 17,
+   "id": "01d06866-f96f-47ab-bb28-14a5ed0501c1",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "import pandas as pd"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 18,
+   "id": "c245c262-6bd5-4856-bc00-6eb118c5ec9e",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "stock_df = pd.read_csv('./stocks.csv')"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 19,
+   "id": "ffcfc171-2ea2-48be-971e-08ec8053415f",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr style=\"text-align: right;\">\n",
+       "      <th></th>\n",
+       "      <th>m</th>\n",
+       "      <th>stock</th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>0</th>\n",
+       "      <td>m1</td>\n",
+       "      <td>35</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>1</th>\n",
+       "      <td>m2</td>\n",
+       "      <td>22</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2</th>\n",
+       "      <td>m3</td>\n",
+       "      <td>27</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "</div>"
+      ],
+      "text/plain": [
+       "    m  stock\n",
+       "0  m1     35\n",
+       "1  m2     22\n",
+       "2  m3     27"
+      ]
+     },
+     "execution_count": 19,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "stock_df"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 20,
+   "id": "d9780a3e-455c-474a-acd3-c9d64e807e82",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "require_df = pd.read_csv('./requires.csv')"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 21,
+   "id": "6cc6e307-eea5-425d-9547-024417a895f4",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr style=\"text-align: right;\">\n",
+       "      <th></th>\n",
+       "      <th>p</th>\n",
+       "      <th>m</th>\n",
+       "      <th>require</th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>0</th>\n",
+       "      <td>p1</td>\n",
+       "      <td>m1</td>\n",
+       "      <td>2</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>1</th>\n",
+       "      <td>p1</td>\n",
+       "      <td>m2</td>\n",
+       "      <td>0</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2</th>\n",
+       "      <td>p1</td>\n",
+       "      <td>m3</td>\n",
+       "      <td>1</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>3</th>\n",
+       "      <td>p2</td>\n",
+       "      <td>m1</td>\n",
+       "      <td>3</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>4</th>\n",
+       "      <td>p2</td>\n",
+       "      <td>m2</td>\n",
+       "      <td>2</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>5</th>\n",
+       "      <td>p2</td>\n",
+       "      <td>m3</td>\n",
+       "      <td>0</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>6</th>\n",
+       "      <td>p3</td>\n",
+       "      <td>m1</td>\n",
+       "      <td>0</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>7</th>\n",
+       "      <td>p3</td>\n",
+       "      <td>m2</td>\n",
+       "      <td>2</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>8</th>\n",
+       "      <td>p3</td>\n",
+       "      <td>m3</td>\n",
+       "      <td>2</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>9</th>\n",
+       "      <td>p4</td>\n",
+       "      <td>m1</td>\n",
+       "      <td>2</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>10</th>\n",
+       "      <td>p4</td>\n",
+       "      <td>m2</td>\n",
+       "      <td>2</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>11</th>\n",
+       "      <td>p4</td>\n",
+       "      <td>m3</td>\n",
+       "      <td>2</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "</div>"
+      ],
+      "text/plain": [
+       "     p   m  require\n",
+       "0   p1  m1        2\n",
+       "1   p1  m2        0\n",
+       "2   p1  m3        1\n",
+       "3   p2  m1        3\n",
+       "4   p2  m2        2\n",
+       "5   p2  m3        0\n",
+       "6   p3  m1        0\n",
+       "7   p3  m2        2\n",
+       "8   p3  m3        2\n",
+       "9   p4  m1        2\n",
+       "10  p4  m2        2\n",
+       "11  p4  m3        2"
+      ]
+     },
+     "execution_count": 21,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "require_df"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 22,
+   "id": "9904b9fe-676c-41f1-8da6-935ba52c3ebd",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "gain_df = pd.read_csv('./gains.csv')"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 23,
+   "id": "01f5962b-8091-476e-89f9-a27732fe2f89",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr style=\"text-align: right;\">\n",
+       "      <th></th>\n",
+       "      <th>p</th>\n",
+       "      <th>gain</th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>0</th>\n",
+       "      <td>p1</td>\n",
+       "      <td>3</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>1</th>\n",
+       "      <td>p2</td>\n",
+       "      <td>4</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2</th>\n",
+       "      <td>p3</td>\n",
+       "      <td>4</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>3</th>\n",
+       "      <td>p4</td>\n",
+       "      <td>5</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "</div>"
+      ],
+      "text/plain": [
+       "    p  gain\n",
+       "0  p1     3\n",
+       "1  p2     4\n",
+       "2  p3     4\n",
+       "3  p4     5"
+      ]
+     },
+     "execution_count": 23,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "gain_df"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 24,
+   "id": "efd3e2c3-ce18-4a1b-835f-a8623c32f52d",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "products = gain_df['p'].tolist()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 25,
+   "id": "c34fb517-719c-4215-afdc-4cb47ef3c121",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "materials = stock_df['m'].tolist()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 26,
+   "id": "4775eee2-2428-4301-affa-5a3788d3c749",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "['p1', 'p2', 'p3', 'p4']"
+      ]
+     },
+     "execution_count": 26,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "products"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 27,
+   "id": "5b27ee0a-b2f1-4e3b-883c-d05925d4b4f2",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "['m1', 'm2', 'm3']"
+      ]
+     },
+     "execution_count": 27,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "materials"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 28,
+   "id": "17e8ec1f-88af-4dab-a94e-82929558b2b7",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "stock = dict(zip(stock_df['m'], stock_df['stock']))"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 29,
+   "id": "2789cdc5-727e-4326-a640-888d68388f50",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "{'m1': 35, 'm2': 22, 'm3': 27}"
+      ]
+     },
+     "execution_count": 29,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "stock"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 30,
+   "id": "3b9978ea-402a-42e4-b248-19c57e123974",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "require = {(row.p, row.m): row.require for row in require_df.itertuples()}"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 31,
+   "id": "ee8532b6-b26e-45ca-ac32-def3cbcd4230",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "{('p1', 'm1'): 2,\n",
+       " ('p1', 'm2'): 0,\n",
+       " ('p1', 'm3'): 1,\n",
+       " ('p2', 'm1'): 3,\n",
+       " ('p2', 'm2'): 2,\n",
+       " ('p2', 'm3'): 0,\n",
+       " ('p3', 'm1'): 0,\n",
+       " ('p3', 'm2'): 2,\n",
+       " ('p3', 'm3'): 2,\n",
+       " ('p4', 'm1'): 2,\n",
+       " ('p4', 'm2'): 2,\n",
+       " ('p4', 'm3'): 2}"
+      ]
+     },
+     "execution_count": 31,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "require"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 32,
+   "id": "6316dfd9-3721-4971-9cf4-06f5a592224a",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "gain = dict(zip(gain_df['p'], gain_df['gain']))"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 33,
+   "id": "79d077a4-7f3a-4ab0-bbc9-3619249d8256",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "{'p1': 3, 'p2': 4, 'p3': 4, 'p4': 5}"
+      ]
+     },
+     "execution_count": 33,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "gain"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 34,
+   "id": "88cd1108-9bc0-4849-a17e-8ce176acff4c",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "promblem = pulp.LpProblem(\n",
+    "    'IntegerProblem',\n",
+    "    pulp.LpMaximize\n",
+    ")"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 35,
+   "id": "5363520f-0545-4160-b4b4-e0680cf9d61e",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "x = pulp.LpVariable.dicts(\n",
+    "    'x',\n",
+    "    products,\n",
+    "    cat='Integer'\n",
+    ")"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 36,
+   "id": "3d1397c0-0a37-4abb-9c2c-fbcd73c93e8a",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "{'p1': x_p1, 'p2': x_p2, 'p3': x_p3, 'p4': x_p4}"
+      ]
+     },
+     "execution_count": 36,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "x"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 37,
+   "id": "88de748f-868d-4dd0-8b29-728717c27a0b",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "for p in products:\n",
+    "    problem += x[p] >= 0"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 38,
+   "id": "053031ac-7009-4ee8-b7cd-bffb4262e51d",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "for m in materials:\n",
+    "    problem += pulp.lpSum([require[p, m] * x[p] for p in products]) <= stock[m]"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 39,
+   "id": "b41ca6b0-4aba-45a2-8566-b8c51a696c73",
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/Users/jianghui.ouyang/repository/PyOptBook/venv/lib/python3.8/site-packages/pulp/pulp.py:1704: UserWarning: Overwriting previously set objective.\n",
+      "  warnings.warn(\"Overwriting previously set objective.\")\n"
+     ]
+    }
+   ],
+   "source": [
+    "problem += pulp.lpSum([gain[p] * x[p] for p in products])"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 40,
+   "id": "4fc6e46c-cf37-419a-ad95-df51d5b984a8",
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Welcome to the CBC MILP Solver \n",
+      "Version: 2.10.3 \n",
+      "Build Date: Dec 15 2019 \n",
+      "\n",
+      "command line - /Users/jianghui.ouyang/repository/PyOptBook/venv/lib/python3.8/site-packages/pulp/apis/../solverdir/cbc/osx/64/cbc /var/folders/_x/r6xc9__d50sgdr9y8zj5bc5nbq0vnj/T/338eeab1f9c84fd683aab17c6ac78472-pulp.mps max timeMode elapsed branch printingOptions all solution /var/folders/_x/r6xc9__d50sgdr9y8zj5bc5nbq0vnj/T/338eeab1f9c84fd683aab17c6ac78472-pulp.sol (default strategy 1)\n",
+      "At line 2 NAME          MODEL\n",
+      "At line 3 ROWS\n",
+      "At line 16 COLUMNS\n",
+      "At line 48 RHS\n",
+      "At line 60 BOUNDS\n",
+      "At line 67 ENDATA\n",
+      "Problem MODEL has 11 rows, 6 columns and 19 elements\n",
+      "Coin0008I MODEL read with 0 errors\n",
+      "Option for timeMode changed from cpu to elapsed\n",
+      "Continuous objective value is 80.4286 - 0.00 seconds\n",
+      "Cgl0004I processed model has 3 rows, 4 columns (4 integer (0 of which binary)) and 9 elements\n",
+      "Cutoff increment increased from 1e-05 to 0.9999\n",
+      "Cbc0012I Integer solution of -76 found by DiveCoefficient after 0 iterations and 0 nodes (0.01 seconds)\n",
+      "Cbc0038I Full problem 3 rows 4 columns, reduced to 3 rows 3 columns\n",
+      "Cbc0012I Integer solution of -79 found by DiveCoefficient after 1 iterations and 0 nodes (0.01 seconds)\n",
+      "Cbc0031I 1 added rows had average density of 4\n",
+      "Cbc0013I At root node, 1 cuts changed objective from -80.428571 to -79 in 2 passes\n",
+      "Cbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\n",
+      "Cbc0014I Cut generator 1 (Gomory) - 2 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1\n",
+      "Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\n",
+      "Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\n",
+      "Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\n",
+      "Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100\n",
+      "Cbc0001I Search completed - best objective -79, took 1 iterations and 0 nodes (0.01 seconds)\n",
+      "Cbc0035I Maximum depth 0, 0 variables fixed on reduced cost\n",
+      "Cuts at root node changed objective from -80.4286 to -79\n",
+      "Probing was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n",
+      "Gomory was tried 2 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n",
+      "Knapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n",
+      "Clique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n",
+      "MixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n",
+      "FlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n",
+      "TwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n",
+      "ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n",
+      "\n",
+      "Result - Optimal solution found\n",
+      "\n",
+      "Objective value:                79.00000000\n",
+      "Enumerated nodes:               0\n",
+      "Total iterations:               1\n",
+      "Time (CPU seconds):             0.00\n",
+      "Time (Wallclock seconds):       0.01\n",
+      "\n",
+      "Option for printingOptions changed from normal to all\n",
+      "Total time (CPU seconds):       0.00   (Wallclock seconds):       0.01\n",
+      "\n"
+     ]
+    }
+   ],
+   "source": [
+    "status = problem.solve()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 41,
+   "id": "64da9f25-21f4-4b06-b517-3ba3cbbb3a4b",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "'Optimal'"
+      ]
+     },
+     "execution_count": 41,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "pulp.LpStatus[status]"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 42,
+   "id": "d39a1923-8835-4747-92aa-e59508fd9188",
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "p1 13.0\n",
+      "p2 3.0\n",
+      "p3 7.0\n",
+      "p4 -0.0\n"
+     ]
+    }
+   ],
+   "source": [
+    "for p in products:\n",
+    "    print(p, x[p].value())"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 43,
+   "id": "8d3fcfa4-3dda-4e81-87b5-7f574cf7bb35",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "79.0"
+      ]
+     },
+     "execution_count": 43,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "problem.objective.value()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "7abc55c7-484c-40a6-b96a-cdc70ce2bdb3",
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  }
+ ],
+ "metadata": {
+  "kernelspec": {
+   "display_name": "Python 3 (ipykernel)",
+   "language": "python",
+   "name": "python3"
+  },
+  "language_info": {
+   "codemirror_mode": {
+    "name": "ipython",
+    "version": 3
+   },
+   "file_extension": ".py",
+   "mimetype": "text/x-python",
+   "name": "python",
+   "nbconvert_exporter": "python",
+   "pygments_lexer": "ipython3",
+   "version": "3.8.0"
+  }
+ },
+ "nbformat": 4,
+ "nbformat_minor": 5
+}
diff --git a/2.tutorial/tutorial.ipynb b/2.tutorial/tutorial.ipynb
index 0ae2243..3c7bc9c 100644
--- a/2.tutorial/tutorial.ipynb
+++ b/2.tutorial/tutorial.ipynb
@@ -30,8 +30,28 @@
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Using license file /Library/gurobi903/gurobi.lic\n",
-      "No parameters matching '_test' found\n",
+      "Welcome to the CBC MILP Solver \n",
+      "Version: 2.10.3 \n",
+      "Build Date: Dec 15 2019 \n",
+      "\n",
+      "command line - /Users/jianghui.ouyang/repository/PyOptBook/venv/lib/python3.8/site-packages/pulp/apis/../solverdir/cbc/osx/64/cbc /var/folders/_x/r6xc9__d50sgdr9y8zj5bc5nbq0vnj/T/5015ad91a6354cc4af78cc40be6d9a84-pulp.mps max timeMode elapsed branch printingOptions all solution /var/folders/_x/r6xc9__d50sgdr9y8zj5bc5nbq0vnj/T/5015ad91a6354cc4af78cc40be6d9a84-pulp.sol (default strategy 1)\n",
+      "At line 2 NAME          MODEL\n",
+      "At line 3 ROWS\n",
+      "At line 7 COLUMNS\n",
+      "At line 13 RHS\n",
+      "At line 16 BOUNDS\n",
+      "At line 20 ENDATA\n",
+      "Problem MODEL has 2 rows, 3 columns and 4 elements\n",
+      "Coin0008I MODEL read with 0 errors\n",
+      "Option for timeMode changed from cpu to elapsed\n",
+      "Presolve 0 (-2) rows, 0 (-3) columns and 0 (-4) elements\n",
+      "Empty problem - 0 rows, 0 columns and 0 elements\n",
+      "Optimal - objective value -0\n",
+      "After Postsolve, objective 0, infeasibilities - dual 0 (0), primal 0 (0)\n",
+      "Optimal objective 0 - 0 iterations time 0.002, Presolve 0.00\n",
+      "Option for printingOptions changed from normal to all\n",
+      "Total time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n",
+      "\n",
       "Status: Optimal\n",
       "x= 2.0 y= 8.0\n"
      ]
@@ -1140,7 +1160,7 @@
  ],
  "metadata": {
   "kernelspec": {
-   "display_name": "Python 3",
+   "display_name": "Python 3 (ipykernel)",
    "language": "python",
    "name": "python3"
   },
@@ -1154,7 +1174,7 @@
    "name": "python",
    "nbconvert_exporter": "python",
    "pygments_lexer": "ipython3",
-   "version": "3.8.5"
+   "version": "3.8.0"
   }
  },
  "nbformat": 4,
